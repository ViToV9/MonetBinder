local a="/"if MONET_VERSION==nil then a="\\"end;local function b(c,d)d=d or{}if c==nil then return nil end;if d[c]then return d[c]end;local e;if type(c)=="table"then e={}d[c]=e;for f,g in next,c,nil do e[b(f,d)]=b(g,d)end;setmetatable(e,b(getmetatable(c),d))else e=c end;return e end;local function h(i,j)for f,g in next,j,nil do if i[f]==nil then i[b(f)]=b(g)else if type(g)=="table"and type(i[f])=="table"then h(i[f],g)end end end end;local function k(l,m,n)local l=l or{}local n=n or".json"local m=m or script.this.filename..n;m:gsub("\\",a)if MONET_VERSION~=nil then m:gsub("moonloader/","monetloader/")end;local o=getWorkingDirectory()..a.."config"..a..m..n;local p=getWorkingDirectory()..a.."config"..a..m;local q=m;local r=io.open(o,"r")if not r then r=io.open(p,"r")end;if not r then r=io.open(q,"r")end;if r then local s=r:read("*a")if#s==0 then r:close()return b(l)end;local t,u=pcall(decodeJson,s)r:close()if not t or not u then if not t then print("jsoncfg: failed to decode json, error:",u)end;return b(l)end;h(u,l)return u else return b(l)end end;local function v(w,m,n)local n=n or".json"local m=m or script.this.filename..n;m:gsub("\\",a)if MONET_VERSION~=nil then m:gsub("moonloader/","monetloader/")end;local x=getWorkingDirectory()..a.."config"..a;if m:find(a,1,true)~=nil then local y=m:match(".*"..a)createDirectory(y)x=m elseif m:match("%"..n.."$")~=nil then createDirectory(x)x=x..m else createDirectory(x)x=x..m..n end;local r,z=io.open(x,"w")if r then local t,A=pcall(encodeJson,w)if t then r:write(A)else print("jsoncfg: failed to encode json, error:",A)end;r:close()return t else print("jsoncfg: failed to open file, error:",z)return false end end;return{load=k,save=v}